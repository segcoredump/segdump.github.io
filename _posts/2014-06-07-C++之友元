---
layout: post
title: "C++类模板"
categories: 'c＋＋'
tags:

---


友元机制允许一个类的非公有成员访问其指定的函数或类。友元的声明 以关键字friend开始，只能出现在类的内部。友元声明可以出现在类中的任何地方，友元不是授予友元关系的类的成员，所以它们不受其声明出现部分的访问控制影响。

友元可以是普通的非成员函数、其他类的成员函数、类。将一个类设为友元，友元类的所有成员函数都可以访问授予友元关系的那个类的非公有成员。

	/*
	 *友元函数、友元类
	 */
	#include <iostream>
	#include <string>

	using namespace std;

	class __base;              //声明类
	class __mem_func 
	{
		public:
			void __public(__base &b);   //__base的引用，前面必须先声明，如要定义__base的对象，则必须先定义__base

		private:
			void __private(__base &b);
	};

	class __base 
	{
		public:
			__base(int age,string name):age(age),name(name){};

			void __display()
			{
				cout<<age<<","<<name<<endl;
			}

		protected:
			void __protected()
			{
				cout<<"__base::__protected"<<endl;
			}

		private:
			int age;
			string name;

		//通常，将友元声明成组地放在类定义的开始或结尾。
		//将其他类的成员函数设为类友元，必须先定义包含成员函数的类；将其他类或非成员函数设为类的友元，则不必先声明。
		friend class __mem_class;          				//友元类
		friend void __mem_func::__public(__base &b);    //友元成员函数
		friend void __comm_func(__base &b);    			//友元函数

	};

	//友元成员函数
	void __mem_func::__public(__base &b)
	{
		b.age=20;
		b.name.assign("__mem_func");
		b.__display();
		b.__protected();
	}

	void __mem_func::__private(__base &b)             //友元成员函数类中的其他函数不能访问权限授予类
	{
		//b.age=26;                                  //error
		//b.name.assign("__mem_func::__private");    //error
	}

	//友元类
	//友元类的成员函数都可以访问限授予类的成员
	class __mem_class 
	{
		public:
			void __public(__base &b)
			{
				b.age=21;
				b.name.assign("__mem_class::__public");
				b.__display();
			}

		private:
			void __private(__base &b)
			{
				b.age=22;
				b.name.assign("__mem_class::__private");
				b.__display();
			}
	};		


	//友元函数
	//具有成员函数的访问权限
	void __comm_func(__base& b)
	{
		b.age=23;
		b.name.assign("__comm_func");
		b.__display();
		b.__protected();
	}


	int main()
	{
		__base b(10,"__base");
		b.__display();

		__mem_func mf;
		mf.__public(b);

		__mem_class mc;
		mc.__public(b);

		__comm_func(b);

		return 0;
	}
